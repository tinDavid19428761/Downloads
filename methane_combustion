# -*- coding: utf-8 -*-
"""
Created on Mon Sep  4 14:18:30 2023

@author: bjl25
"""
#Importing required pyomo and idaes components
from pyomo.environ import (
    Constraint,
    Var,
    ConcreteModel,
    Expression,
    Objective,
    SolverFactory,
    TransformationFactory,
    value,
)
from pyomo.network import Arc, SequentialDecomposition

#Todo add the four other unit operations
from idaes.models.unit_models import (
PressureChanger,
Mixer,
StoichiometricReactor,
Flash
)

from idaes.models.unit_models.pressure_changer import ThermodynamicAssumption
from idaes.core.util.model_statistics import degrees_of_freedom
from idaes.core import FlowsheetBlock
# Import idaes logger to set output levels
import idaes.logger as idaeslog
from idaes.models.properties.modular_properties import GenericParameterBlock
from  CH4_Comb_PP import configuration 
from  ch4_comb_reaction import CH4CombReactionParameterBlock



m = ConcreteModel()

m.fs = FlowsheetBlock(dynamic=False)

m.fs.methane_properties = GenericParameterBlock(**configuration)
m.fs.reaction_params = CH4CombReactionParameterBlock(
    property_package=m.fs.methane_properties
)

m.fs.R101 = StoichiometricReactor(
    property_package=m.fs.methane_properties,
    reaction_package=m.fs.reaction_params,
    has_heat_of_reaction=True,
    has_heat_transfer=True,
    has_pressure_change=False,
)

m.fs.state_block = m.fs.methane_properties.build_state_block(has_phase_equilibrium=False)

m.fs.state_block.flow_mol.fix(1)
m.fs.state_block.temperature.fix(1100)
m.fs.state_block.pressure.fix(10000)
'''
m.fs.state_block.mole_frac_comp["H2"].fix(1e-5)
m.fs.state_block.mole_frac_comp["N2"].fix(3.76/6.76)
m.fs.state_block.mole_frac_comp["O2"].fix(2/6.76)
m.fs.state_block.mole_frac_comp["CH4"].fix(1/6.76)
m.fs.state_block.mole_frac_comp["CO"].fix(1e-5)
m.fs.state_block.mole_frac_comp["CO2"].fix(1e-5)
m.fs.state_block.mole_frac_comp["H2O"].fix(1e-5)
m.fs.state_block.mole_frac_comp["NH3"].fix(1e-5)
m.fs.state_block.mole_frac_comp["NH3"].unfix()
'''
m.fs.state_block.mole_frac_comp["H2"].fix(1e-5)
m.fs.state_block.mole_frac_comp["N2"].fix(1e-5)
m.fs.state_block.mole_frac_comp["O2"].fix(2/3)
m.fs.state_block.mole_frac_comp["CH4"].fix(1/3)
m.fs.state_block.mole_frac_comp["CO"].fix(1e-5)
m.fs.state_block.mole_frac_comp["CO2"].fix(1e-5)
m.fs.state_block.mole_frac_comp["H2O"].fix(1e-5)
m.fs.state_block.mole_frac_comp["NH3"].fix(1e-5)
m.fs.state_block.mole_frac_comp["NH3"].unfix()

m.fs.reaction_block = 
from idaes.core.util.model_statistics import degrees_of_freedom
print(degrees_of_freedom(m))
m.fs.state_block.initialize()

solver=SolverFactory("ipopt")
status=solver.solve(m,tee=True)

m.fs.state_block.display()




